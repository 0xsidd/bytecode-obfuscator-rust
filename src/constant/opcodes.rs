use std::collections::HashMap;

fn get_opcode_names() -> HashMap<String, String> {
    HashMap::from([
        ("00".to_string(), "STOP".to_string()),
        ("01".to_string(), "ADD".to_string()),
        ("02".to_string(), "MUL".to_string()),
        ("03".to_string(), "SUB".to_string()),
        ("04".to_string(), "DIV".to_string()),
        ("05".to_string(), "SDIV".to_string()),
        ("06".to_string(), "MOD".to_string()),
        ("07".to_string(), "SMOD".to_string()),
        ("08".to_string(), "ADDMOD".to_string()),
        ("09".to_string(), "MULMOD".to_string()),
        ("0a".to_string(), "EXP".to_string()),
        ("0b".to_string(), "SIGNEXTEND".to_string()),
        ("10".to_string(), "LT".to_string()),
        ("11".to_string(), "GT".to_string()),
        ("12".to_string(), "SLT".to_string()),
        ("13".to_string(), "SGT".to_string()),
        ("14".to_string(), "EQ".to_string()),
        ("15".to_string(), "ISZERO".to_string()),
        ("16".to_string(), "AND".to_string()),
        ("17".to_string(), "OR".to_string()),
        ("18".to_string(), "XOR".to_string()),
        ("19".to_string(), "NOT".to_string()),
        ("1a".to_string(), "BYTE".to_string()),
        ("1b".to_string(), "SHL".to_string()),
        ("1c".to_string(), "SHR".to_string()),
        ("1d".to_string(), "SAR".to_string()),
        ("20".to_string(), "KECCAK256".to_string()),
        ("30".to_string(), "ADDRESS".to_string()),
        ("31".to_string(), "BALANCE".to_string()),
        ("32".to_string(), "ORIGIN".to_string()),
        ("33".to_string(), "CALLER".to_string()),
        ("34".to_string(), "CALLVALUE".to_string()),
        ("35".to_string(), "CALLDATALOAD".to_string()),
        ("36".to_string(), "CALLDATASIZE".to_string()),
        ("37".to_string(), "CALLDATACOPY".to_string()),
        ("38".to_string(), "CODESIZE".to_string()),
        ("39".to_string(), "CODECOPY".to_string()),
        ("3a".to_string(), "GASPRICE".to_string()),
        ("3b".to_string(), "EXTCODESIZE".to_string()),
        ("3c".to_string(), "EXTCODECOPY".to_string()),
        ("3d".to_string(), "RETURNDATASIZE".to_string()),
        ("3e".to_string(), "RETURNDATACOPY".to_string()),
        ("3f".to_string(), "EXTCODEHASH".to_string()),
        ("40".to_string(), "BLOCKHASH".to_string()),
        ("41".to_string(), "COINBASE".to_string()),
        ("42".to_string(), "TIMESTAMP".to_string()),
        ("43".to_string(), "NUMBER".to_string()),
        ("44".to_string(), "PREVRANDAO".to_string()),
        ("45".to_string(), "GASLIMIT".to_string()),
        ("46".to_string(), "CHAINID".to_string()),
        ("47".to_string(), "SELFBALANCE".to_string()),
        ("48".to_string(), "BASEFEE".to_string()),
        ("49".to_string(), "BLOBHASH".to_string()),
        ("4a".to_string(), "BLOBBASEFEE".to_string()),
        ("50".to_string(), "POP".to_string()),
        ("51".to_string(), "MLOAD".to_string()),
        ("52".to_string(), "MSTORE".to_string()),
        ("53".to_string(), "MSTORE8".to_string()),
        ("54".to_string(), "SLOAD".to_string()),
        ("55".to_string(), "SSTORE".to_string()),
        ("56".to_string(), "JUMP".to_string()),
        ("57".to_string(), "JUMPI".to_string()),
        ("58".to_string(), "PC".to_string()),
        ("59".to_string(), "MSIZE".to_string()),
        ("5a".to_string(), "GAS".to_string()),
        ("5b".to_string(), "JUMPDEST".to_string()),
        ("5c".to_string(), "TLOAD".to_string()),
        ("5d".to_string(), "TSTORE".to_string()),
        ("5e".to_string(), "MCOPY".to_string()),
        ("5f".to_string(), "PUSH0".to_string()),
        ("60".to_string(), "PUSH1".to_string()),
        ("61".to_string(), "PUSH2".to_string()),
        ("62".to_string(), "PUSH3".to_string()),
        ("63".to_string(), "PUSH4".to_string()),
        ("64".to_string(), "PUSH5".to_string()),
        ("65".to_string(), "PUSH6".to_string()),
        ("66".to_string(), "PUSH7".to_string()),
        ("67".to_string(), "PUSH8".to_string()),
        ("68".to_string(), "PUSH9".to_string()),
        ("69".to_string(), "PUSH10".to_string()),
        ("6a".to_string(), "PUSH11".to_string()),
        ("6b".to_string(), "PUSH12".to_string()),
        ("6c".to_string(), "PUSH13".to_string()),
        ("6d".to_string(), "PUSH14".to_string()),
        ("6e".to_string(), "PUSH15".to_string()),
        ("6f".to_string(), "PUSH16".to_string()),
        ("70".to_string(), "PUSH17".to_string()),
        ("71".to_string(), "PUSH18".to_string()),
        ("72".to_string(), "PUSH19".to_string()),
        ("73".to_string(), "PUSH20".to_string()),
        ("74".to_string(), "PUSH21".to_string()),
        ("75".to_string(), "PUSH22".to_string()),
        ("76".to_string(), "PUSH23".to_string()),
        ("77".to_string(), "PUSH24".to_string()),
        ("78".to_string(), "PUSH25".to_string()),
        ("79".to_string(), "PUSH26".to_string()),
        ("7a".to_string(), "PUSH27".to_string()),
        ("7b".to_string(), "PUSH28".to_string()),
        ("7c".to_string(), "PUSH29".to_string()),
        ("7d".to_string(), "PUSH30".to_string()),
        ("7e".to_string(), "PUSH31".to_string()),
        ("7f".to_string(), "PUSH32".to_string()),
        ("80".to_string(), "DUP1".to_string()),
        ("81".to_string(), "DUP2".to_string()),
        ("82".to_string(), "DUP3".to_string()),
        ("83".to_string(), "DUP4".to_string()),
        ("84".to_string(), "DUP5".to_string()),
        ("85".to_string(), "DUP6".to_string()),
        ("86".to_string(), "DUP7".to_string()),
        ("87".to_string(), "DUP8".to_string()),
        ("88".to_string(), "DUP9".to_string()),
        ("89".to_string(), "DUP10".to_string()),
        ("8a".to_string(), "DUP11".to_string()),
        ("8b".to_string(), "DUP12".to_string()),
        ("8c".to_string(), "DUP13".to_string()),
        ("8d".to_string(), "DUP14".to_string()),
        ("8e".to_string(), "DUP15".to_string()),
        ("8f".to_string(), "DUP16".to_string()),
        ("90".to_string(), "SWAP1".to_string()),
        ("91".to_string(), "SWAP2".to_string()),
        ("92".to_string(), "SWAP3".to_string()),
        ("93".to_string(), "SWAP4".to_string()),
        ("94".to_string(), "SWAP5".to_string()),
        ("95".to_string(), "SWAP6".to_string()),
        ("96".to_string(), "SWAP7".to_string()),
        ("97".to_string(), "SWAP8".to_string()),
        ("98".to_string(), "SWAP9".to_string()),
        ("99".to_string(), "SWAP10".to_string()),
        ("9a".to_string(), "SWAP11".to_string()),
        ("9b".to_string(), "SWAP12".to_string()),
        ("9c".to_string(), "SWAP13".to_string()),
        ("9d".to_string(), "SWAP14".to_string()),
        ("9e".to_string(), "SWAP15".to_string()),
        ("9f".to_string(), "SWAP16".to_string()),
        ("a0".to_string(), "LOG0".to_string()),
        ("a1".to_string(), "LOG1".to_string()),
        ("a2".to_string(), "LOG2".to_string()),
        ("a3".to_string(), "LOG3".to_string()),
        ("a4".to_string(), "LOG4".to_string()),
        ("f0".to_string(), "CREATE".to_string()),
        ("f1".to_string(), "CALL".to_string()),
        ("f2".to_string(), "CALLCODE".to_string()),
        ("f3".to_string(), "RETURN".to_string()),
        ("f4".to_string(), "DELEGATECALL".to_string()),
        ("f5".to_string(), "CREATE2".to_string()),
        ("fa".to_string(), "STATICCALL".to_string()),
        ("fd".to_string(), "REVERT".to_string()),
        ("fe".to_string(), "INVALID".to_string()),
        ("ff".to_string(), "SELFDESTRUCT".to_string()),
    ])
}

// get opcode's name
pub fn get_opcode_name(opcode: &String) -> Option<String> {
    get_opcode_names().get(opcode).cloned()
}

fn get_opcode_sizes() -> HashMap<String, i8> {
    HashMap::from([
        ("00".to_string(), 2),
        ("01".to_string(), 2),
        ("02".to_string(), 2),
        ("03".to_string(), 2),
        ("04".to_string(), 2),
        ("05".to_string(), 2),
        ("06".to_string(), 2),
        ("07".to_string(), 2),
        ("08".to_string(), 2),
        ("09".to_string(), 2),
        ("0a".to_string(), 2),
        ("0b".to_string(), 2),
        ("0c".to_string(), 2),
        ("0d".to_string(), 2),
        ("0e".to_string(), 2),
        ("0f".to_string(), 2),
        ("10".to_string(), 2),
        ("11".to_string(), 2),
        ("12".to_string(), 2),
        ("13".to_string(), 2),
        ("14".to_string(), 2),
        ("15".to_string(), 2),
        ("16".to_string(), 2),
        ("17".to_string(), 2),
        ("18".to_string(), 2),
        ("19".to_string(), 2),
        ("1a".to_string(), 2),
        ("1b".to_string(), 2),
        ("1c".to_string(), 2),
        ("1d".to_string(), 2),
        ("1e".to_string(), 2),
        ("1f".to_string(), 2),
        ("20".to_string(), 2),
        ("21".to_string(), 2),
        ("22".to_string(), 2),
        ("23".to_string(), 2),
        ("24".to_string(), 2),
        ("25".to_string(), 2),
        ("26".to_string(), 2),
        ("27".to_string(), 2),
        ("28".to_string(), 2),
        ("29".to_string(), 2),
        ("2a".to_string(), 2),
        ("2b".to_string(), 2),
        ("2c".to_string(), 2),
        ("2d".to_string(), 2),
        ("2e".to_string(), 2),
        ("2f".to_string(), 2),
        ("30".to_string(), 2),
        ("31".to_string(), 2),
        ("32".to_string(), 2),
        ("33".to_string(), 2),
        ("34".to_string(), 2),
        ("35".to_string(), 2),
        ("36".to_string(), 2),
        ("37".to_string(), 2),
        ("38".to_string(), 2),
        ("39".to_string(), 2),
        ("3a".to_string(), 2),
        ("3b".to_string(), 2),
        ("3c".to_string(), 2),
        ("3d".to_string(), 2),
        ("3e".to_string(), 2),
        ("3f".to_string(), 2),
        ("40".to_string(), 2),
        ("41".to_string(), 2),
        ("42".to_string(), 2),
        ("43".to_string(), 2),
        ("44".to_string(), 2),
        ("45".to_string(), 2),
        ("46".to_string(), 2),
        ("47".to_string(), 2),
        ("48".to_string(), 2),
        ("49".to_string(), 2),
        ("4a".to_string(), 2),
        ("4b".to_string(), 2),
        ("4c".to_string(), 2),
        ("4d".to_string(), 2),
        ("4e".to_string(), 2),
        ("4f".to_string(), 2),
        ("50".to_string(), 2),
        ("51".to_string(), 2),
        ("52".to_string(), 2),
        ("53".to_string(), 2),
        ("54".to_string(), 2),
        ("55".to_string(), 2),
        ("56".to_string(), 2),
        ("57".to_string(), 2),
        ("58".to_string(), 2),
        ("59".to_string(), 2),
        ("5a".to_string(), 2),
        ("5b".to_string(), 2),
        ("5c".to_string(), 2),
        ("5d".to_string(), 2),
        ("5e".to_string(), 2),
        ("5f".to_string(), 2),
        ("60".to_string(), 4),
        ("61".to_string(), 6),
        ("62".to_string(), 8),
        ("63".to_string(), 10),
        ("64".to_string(), 12),
        ("65".to_string(), 14),
        ("66".to_string(), 16),
        ("67".to_string(), 18),
        ("68".to_string(), 20),
        ("69".to_string(), 22),
        ("6a".to_string(), 24),
        ("6b".to_string(), 26),
        ("6c".to_string(), 28),
        ("6d".to_string(), 30),
        ("6e".to_string(), 32),
        ("6f".to_string(), 34),
        ("70".to_string(), 36),
        ("71".to_string(), 38),
        ("72".to_string(), 40),
        ("73".to_string(), 42),
        ("74".to_string(), 44),
        ("75".to_string(), 46),
        ("76".to_string(), 48),
        ("77".to_string(), 50),
        ("78".to_string(), 52),
        ("79".to_string(), 54),
        ("7a".to_string(), 56),
        ("7b".to_string(), 58),
        ("7c".to_string(), 60),
        ("7d".to_string(), 62),
        ("7e".to_string(), 64),
        ("7f".to_string(), 66),
        ("80".to_string(), 2),
        ("81".to_string(), 2),
        ("82".to_string(), 2),
        ("83".to_string(), 2),
        ("84".to_string(), 2),
        ("85".to_string(), 2),
        ("86".to_string(), 2),
        ("87".to_string(), 2),
        ("88".to_string(), 2),
        ("89".to_string(), 2),
        ("8a".to_string(), 2),
        ("8b".to_string(), 2),
        ("8c".to_string(), 2),
        ("8d".to_string(), 2),
        ("8e".to_string(), 2),
        ("8f".to_string(), 2),
        ("90".to_string(), 2),
        ("91".to_string(), 2),
        ("92".to_string(), 2),
        ("93".to_string(), 2),
        ("94".to_string(), 2),
        ("95".to_string(), 2),
        ("96".to_string(), 2),
        ("97".to_string(), 2),
        ("98".to_string(), 2),
        ("99".to_string(), 2),
        ("9a".to_string(), 2),
        ("9b".to_string(), 2),
        ("9c".to_string(), 2),
        ("9d".to_string(), 2),
        ("9e".to_string(), 2),
        ("9f".to_string(), 2),
        ("a0".to_string(), 2),
        ("a1".to_string(), 2),
        ("a2".to_string(), 2),
        ("a3".to_string(), 2),
        ("a4".to_string(), 2),
        ("a5".to_string(), 2),
        ("a6".to_string(), 2),
        ("a7".to_string(), 2),
        ("a8".to_string(), 2),
        ("a9".to_string(), 2),
        ("aa".to_string(), 2),
        ("ab".to_string(), 2),
        ("ac".to_string(), 2),
        ("ad".to_string(), 2),
        ("ae".to_string(), 2),
        ("af".to_string(), 2),
        ("f0".to_string(), 2),
        ("f1".to_string(), 2),
        ("f2".to_string(), 2),
        ("f3".to_string(), 2),
        ("f4".to_string(), 2),
        ("f5".to_string(), 2),
        ("fa".to_string(), 2),
        ("fd".to_string(), 2),
        ("fe".to_string(), 2),
        ("ff".to_string(), 2),
    ])
}

pub fn get_opcode_size(opcode: &String) -> Option<i8> {
    match get_opcode_sizes().get(opcode) {
        Some(size) => Some(*size),
        None => Some(2),
    }
}
